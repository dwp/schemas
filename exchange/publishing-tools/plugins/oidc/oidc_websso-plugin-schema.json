{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "https://dwp.gov.uk/exchange/publishing-tools/plugins/oidc/oidc_websso-plugin-schema.json",
  "title": "OIDC Web SSO plugin",
  "type": "object",
  "properties": {
    "identity_provider": {
      "type": "string",
      "description": "The identity provider the plugin will interact with to carry our the OpenId Connect auth code flow",
      "enum": [
        "dth-sandbox",
        "dth-test",
        "dth-live",
        "dth-staging",
        "dth-stub",
        "azure-ad",
        "dth2-sandbox",
        "dth2-sandbox-sra",
        "dth2-dev",
        "dth2-test",
        "dth2-staging",
        "dth2-live",
        "dth2-sra",
        "nhs-dev-simple",
        "nhs-dev",
        "nhs-int",
        "nhs-live"
      ]
    },
    "additional_scopes": {
      "type": "array",
      "description": "Additional scopes to request from the authorization endpoint",
      "items": {
        "type": "string",
        "minLength": 1
      }
    },
    "client_id": {
      "type": "string",
      "description": "Reference to the client id env var in the gateway, refer to gateway module for details",
      "minLength": 2,
      "pattern": "^(\\{vault:\/\/env\/|[^{]).*$"
    },
    "redirect_uri": {
      "type": "string",
      "format": "uri",
      "pattern": "^(http|https)://[^ \"]+$",
      "description": "The redirect URI passed to the authorization and token endpoints"
    },
    "uplift": {
      "type": "object",
      "description": "Uplift configuration to allow moving from a lower `confidence_level` to a higher one",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Whether to enable uplift",
          "default": true
        },
        "redirect_uri": {
          "type": "string",
          "format": "uri",
          "pattern": "^(http|https)://[^ \"]+$",
          "description": "Gateway URI to redirect the user to for uplift. If omitted then redirect will default to the routeâ€™s host, path and any query args will be maintained"
        }
      },
      "required": [
        "enabled"
      ]
    },
    "logout": {
      "type": "boolean",
      "description": "If true, this route will not forward to the upstream application. Instead, it will end the user's session and redirect to the IDP's logout URI. The IDP's logout URI will then redirect to the application's logout confirmation page, which should have a different path than the logout path, for example, /logout and /signed-out.",
      "default": false
    },
    "logout_redirect_uri": {
      "type": "string",
      "format": "uri",
      "pattern": "^(http|https)://[^ \"]+$",
      "description": "Where to redirect the client on logout"
    },
    "stub_hostname": {
      "type": "string",
      "format": "uri",
      "pattern": "^(http|https)://[^ \"]+$",
      "description": "The hostname used for dth-stub"
    },
    "unauthorized_redirect_uri": {
      "type": "string",
      "format": "uri",
      "pattern": "^(http|https)://[^ \"]+$",
      "description": "Where to redirect the client on unauthorized requests"
    },
    "preserve_query_args": {
      "type": "boolean",
      "description": "Whether to preserve query arguments even when doing authorization code flow",
      "default": false
    },
    "verify_parameters": {
      "type": "boolean",
      "description": "Verify plugin configuration against discovery",
      "default": true
    },
    "session": {
      "title": "Session",
      "type": "object",
      "properties": {
        "cookie_name": {
          "type": "string",
          "description": "The session cookie name",
          "default": "exchange-gateway-session",
          "minLength": 2
        },
        "redis": {
          "title": "Redis configuration",
          "type": "object",
          "properties": {
            "prefix": {
              "type": "string"
            },
            "host": {
              "type": "string"
            },
            "port": {
              "type": "integer"
            },
            "ssl": {
              "type": "boolean"
            },
            "ssl_verify": {
              "type": "boolean"
            },
            "connect_timeout": {
              "type": "integer"
            },
            "read_timeout": {
              "type": "integer"
            },
            "send_timeout": {
              "type": "integer"
            },
            "auth_enabled": {
              "type": "boolean",
              "default": true
            }
          },
          "required": [
          ]
        }
      },
      "additionalProperties": false,
      "required": [
        "redis"
      ]
    },
    "client_secret": {
      "title": "Client secrets",
      "type": "array",
      "description": "Reference to the client secret env var in the gateway, refer to gateway module for details",
      "minLength": 3,
      "pattern": "^{vault:\/\/env\/[\\w|-]+\/?[\\w|-]+}$"
    },
    "confidence_level": {
      "title": "Confidence level",
      "description": "Extra query argument values passed to the authorization endpoint",
      "enum": [
        "zero",
        "medium"
      ]
    }
  },
  "required": [
    "identity_provider"
  ],
  "dependencies": {
    "identity_provider": {
      "oneOf": [
        {
          "properties": {
            "identity_provider": {
              "const": "dth2-sandbox-sra"
            }
          },
          "required": [
            "confidence_level"
          ]
        },
        {
          "properties": {
            "identity_provider": {
              "const": "dth-stub"
            }
          },
          "required": [
            "stub_hostname"
          ]
        },
        {
          "not": {
            "properties": {
              "identity_provider": {
                "anyOf": [
                  {
                    "const": "dth2-sandbox-sra"
                  },
                  {
                    "const": "dth-stub"
                  }
                ]
              }
            }
          }
        }
      ]
    }
  },
  "allOf": [
    {
      "if": {
        "properties": {
          "logout": {
            "enum": [
              true
            ]
          }
        },
        "then": {
          "properties": {
            "client_id": {
              "pattern": "^[^\/{].*",
              "description": "client_id cannot be a vault reference when logout is true"
            }
          }
        }
      }
    }
  ],
  "additionalProperties": false
}
